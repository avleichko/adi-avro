/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.adidas.product.worker.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ResultSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 444567144505555072L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ResultSchema\",\"namespace\":\"com.adidas.product.worker.schema\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"consumer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"millis\",\"type\":\"long\"},{\"name\":\"jobFlow\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"jobExecution\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ResultSchema> ENCODER =
      new BinaryMessageEncoder<ResultSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ResultSchema> DECODER =
      new BinaryMessageDecoder<ResultSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ResultSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ResultSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ResultSchema>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ResultSchema to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ResultSchema from a ByteBuffer. */
  public static ResultSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String id;
   private java.lang.String consumer;
   private long millis;
   private java.lang.String jobFlow;
   private java.lang.String jobExecution;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ResultSchema() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param consumer The new value for consumer
   * @param millis The new value for millis
   * @param jobFlow The new value for jobFlow
   * @param jobExecution The new value for jobExecution
   */
  public ResultSchema(java.lang.String id, java.lang.String consumer, java.lang.Long millis, java.lang.String jobFlow, java.lang.String jobExecution) {
    this.id = id;
    this.consumer = consumer;
    this.millis = millis;
    this.jobFlow = jobFlow;
    this.jobExecution = jobExecution;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return consumer;
    case 2: return millis;
    case 3: return jobFlow;
    case 4: return jobExecution;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: consumer = (java.lang.String)value$; break;
    case 2: millis = (java.lang.Long)value$; break;
    case 3: jobFlow = (java.lang.String)value$; break;
    case 4: jobExecution = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'consumer' field.
   * @return The value of the 'consumer' field.
   */
  public java.lang.String getConsumer() {
    return consumer;
  }

  /**
   * Sets the value of the 'consumer' field.
   * @param value the value to set.
   */
  public void setConsumer(java.lang.String value) {
    this.consumer = value;
  }

  /**
   * Gets the value of the 'millis' field.
   * @return The value of the 'millis' field.
   */
  public java.lang.Long getMillis() {
    return millis;
  }

  /**
   * Sets the value of the 'millis' field.
   * @param value the value to set.
   */
  public void setMillis(java.lang.Long value) {
    this.millis = value;
  }

  /**
   * Gets the value of the 'jobFlow' field.
   * @return The value of the 'jobFlow' field.
   */
  public java.lang.String getJobFlow() {
    return jobFlow;
  }

  /**
   * Sets the value of the 'jobFlow' field.
   * @param value the value to set.
   */
  public void setJobFlow(java.lang.String value) {
    this.jobFlow = value;
  }

  /**
   * Gets the value of the 'jobExecution' field.
   * @return The value of the 'jobExecution' field.
   */
  public java.lang.String getJobExecution() {
    return jobExecution;
  }

  /**
   * Sets the value of the 'jobExecution' field.
   * @param value the value to set.
   */
  public void setJobExecution(java.lang.String value) {
    this.jobExecution = value;
  }

  /**
   * Creates a new ResultSchema RecordBuilder.
   * @return A new ResultSchema RecordBuilder
   */
  public static com.adidas.product.worker.schema.ResultSchema.Builder newBuilder() {
    return new com.adidas.product.worker.schema.ResultSchema.Builder();
  }

  /**
   * Creates a new ResultSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ResultSchema RecordBuilder
   */
  public static com.adidas.product.worker.schema.ResultSchema.Builder newBuilder(com.adidas.product.worker.schema.ResultSchema.Builder other) {
    return new com.adidas.product.worker.schema.ResultSchema.Builder(other);
  }

  /**
   * Creates a new ResultSchema RecordBuilder by copying an existing ResultSchema instance.
   * @param other The existing instance to copy.
   * @return A new ResultSchema RecordBuilder
   */
  public static com.adidas.product.worker.schema.ResultSchema.Builder newBuilder(com.adidas.product.worker.schema.ResultSchema other) {
    return new com.adidas.product.worker.schema.ResultSchema.Builder(other);
  }

  /**
   * RecordBuilder for ResultSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ResultSchema>
    implements org.apache.avro.data.RecordBuilder<ResultSchema> {

    private java.lang.String id;
    private java.lang.String consumer;
    private long millis;
    private java.lang.String jobFlow;
    private java.lang.String jobExecution;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.adidas.product.worker.schema.ResultSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.consumer)) {
        this.consumer = data().deepCopy(fields()[1].schema(), other.consumer);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.millis)) {
        this.millis = data().deepCopy(fields()[2].schema(), other.millis);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.jobFlow)) {
        this.jobFlow = data().deepCopy(fields()[3].schema(), other.jobFlow);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.jobExecution)) {
        this.jobExecution = data().deepCopy(fields()[4].schema(), other.jobExecution);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ResultSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.adidas.product.worker.schema.ResultSchema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.consumer)) {
        this.consumer = data().deepCopy(fields()[1].schema(), other.consumer);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.millis)) {
        this.millis = data().deepCopy(fields()[2].schema(), other.millis);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.jobFlow)) {
        this.jobFlow = data().deepCopy(fields()[3].schema(), other.jobFlow);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.jobExecution)) {
        this.jobExecution = data().deepCopy(fields()[4].schema(), other.jobExecution);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'consumer' field.
      * @return The value.
      */
    public java.lang.String getConsumer() {
      return consumer;
    }

    /**
      * Sets the value of the 'consumer' field.
      * @param value The value of 'consumer'.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder setConsumer(java.lang.String value) {
      validate(fields()[1], value);
      this.consumer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'consumer' field has been set.
      * @return True if the 'consumer' field has been set, false otherwise.
      */
    public boolean hasConsumer() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'consumer' field.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder clearConsumer() {
      consumer = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'millis' field.
      * @return The value.
      */
    public java.lang.Long getMillis() {
      return millis;
    }

    /**
      * Sets the value of the 'millis' field.
      * @param value The value of 'millis'.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder setMillis(long value) {
      validate(fields()[2], value);
      this.millis = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'millis' field has been set.
      * @return True if the 'millis' field has been set, false otherwise.
      */
    public boolean hasMillis() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'millis' field.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder clearMillis() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobFlow' field.
      * @return The value.
      */
    public java.lang.String getJobFlow() {
      return jobFlow;
    }

    /**
      * Sets the value of the 'jobFlow' field.
      * @param value The value of 'jobFlow'.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder setJobFlow(java.lang.String value) {
      validate(fields()[3], value);
      this.jobFlow = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'jobFlow' field has been set.
      * @return True if the 'jobFlow' field has been set, false otherwise.
      */
    public boolean hasJobFlow() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'jobFlow' field.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder clearJobFlow() {
      jobFlow = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'jobExecution' field.
      * @return The value.
      */
    public java.lang.String getJobExecution() {
      return jobExecution;
    }

    /**
      * Sets the value of the 'jobExecution' field.
      * @param value The value of 'jobExecution'.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder setJobExecution(java.lang.String value) {
      validate(fields()[4], value);
      this.jobExecution = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'jobExecution' field has been set.
      * @return True if the 'jobExecution' field has been set, false otherwise.
      */
    public boolean hasJobExecution() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'jobExecution' field.
      * @return This builder.
      */
    public com.adidas.product.worker.schema.ResultSchema.Builder clearJobExecution() {
      jobExecution = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ResultSchema build() {
      try {
        ResultSchema record = new ResultSchema();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.consumer = fieldSetFlags()[1] ? this.consumer : (java.lang.String) defaultValue(fields()[1]);
        record.millis = fieldSetFlags()[2] ? this.millis : (java.lang.Long) defaultValue(fields()[2]);
        record.jobFlow = fieldSetFlags()[3] ? this.jobFlow : (java.lang.String) defaultValue(fields()[3]);
        record.jobExecution = fieldSetFlags()[4] ? this.jobExecution : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ResultSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<ResultSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ResultSchema>
    READER$ = (org.apache.avro.io.DatumReader<ResultSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
